# generated by fastapi-codegen:
#   filename:  d:\project\python\ai_code_tools\fastapi-code-generator\apifox_aihub_json\amap_api_template\amap.json
#   timestamp: 2025-06-17T09:08:09+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class Field1(BaseModel):
    pass


class Step(BaseModel):
    instruction: Optional[str] = Field(None, description='路段步行指示')
    road: Optional[str] = Field(None, description='道路名称')
    distance: Optional[str] = Field(None, description='\t 此路段距离  单位：米')
    orientation: Optional[str] = Field(None, description='方向')
    duration: Optional[str] = Field(None, description='此路段预计步行时间')
    polyline: Optional[str] = Field(None, description='此路段坐标点')
    action: Optional[str] = Field(
        None,
        description='步行主要动作，详情见[步行动作列表](https://lbs.amap.com/api/webservice/guide/api/direction#walk_action)',
    )
    assistant_action: Optional[str] = Field(
        None,
        description='步行辅助动作，详情见[步行动作列表](https://lbs.amap.com/api/webservice/guide/api/direction#walk_action)',
    )
    walk_type: Optional[str] = Field(
        None,
        description='\t 这段路是否存在特殊的方式  0，普通道路  1，人行横道  3，地下通道  4，过街天桥  5，地铁通道  6，公园  7，广场  8，扶梯  9，直梯  10，索道  11，空中通道  12，建筑物穿越通道  13，行人通道  14，游船路线  15，观光车路线  16，滑道  18，扩路  19，道路附属连接线  20，阶梯  21，斜坡  22，桥  23，隧道  30，轮渡',
    )


class Steps(BaseModel):
    step: Optional[Step] = Field(None, description='每段步行方案')


class Paths(BaseModel):
    distance: Optional[str] = Field(None, description='起点和终点的步行距离  单位：米')
    duration: Optional[str] = Field(None, description='步行时间预计  单位：秒')
    steps: Optional[Steps] = Field(None, description='返回步行结果列表')


class Route(BaseModel):
    origin: Optional[str] = Field(None, description='起点坐标')
    destination: Optional[str] = Field(None, description='终点坐标')
    paths: Optional[Paths] = Field(None, description='步行方案')


class V3DirectionWalkingGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='返回状态  值为0或1  1：成功；0：失败'
    )
    info: Optional[str] = Field(
        None,
        description='返回的状态信息，status为0时，info返回错误原；否则返回“OK”。详情参阅[info状态表](https://lbs.amap.com/api/webservice/info/)',
    )
    count: Optional[str] = Field(None, description='返回结果总数目')
    route: Optional[Route] = Field(None, description='路线信息列表')


class Step1(BaseModel):
    instruction: str
    road: List[str]
    distance: str
    duration: List[str]
    polyline: str
    action: List[str]
    assistant_action: List[str]


class Walking(BaseModel):
    origin: str
    destination: str
    distance: str
    duration: str
    steps: List[Step1]


class DepartureStop(BaseModel):
    name: str
    id: str
    location: str


class ArrivalStop(BaseModel):
    name: str
    id: str
    location: str


class ViaStop(BaseModel):
    name: str
    id: str
    location: str


class Busline(BaseModel):
    departure_stop: DepartureStop
    arrival_stop: ArrivalStop
    name: str
    id: str
    type: str
    distance: str
    duration: str
    polyline: str
    bustimetag: str
    start_time: List[str]
    end_time: List[str]
    via_num: str
    via_stops: List[ViaStop]


class Bus(BaseModel):
    buslines: List[Busline]


class Entrance(BaseModel):
    name: str
    location: str


class Exit(BaseModel):
    name: str
    location: str


class Railway(BaseModel):
    via_stops: List[str]
    alters: List[str]
    spaces: List[str]


class Segment(BaseModel):
    taxi: List[str]
    walking: Walking = Field(
        ..., description='详见步行方案信息列表', title='此路段步行导航信息'
    )
    bus: Bus = Field(
        ..., description='详见公交方案信息列表', title='此路段公交导航信息'
    )
    entrance: Union[List[str], Entrance] = Field(
        ..., description='只在地铁路段有值，详见出入口信息列表', title='地铁入口'
    )
    exit: Union[List[str], Exit] = Field(
        ..., description='只在地铁路段有值，详见出入口信息列表', title='地铁出口'
    )
    railway: Railway = Field(
        ...,
        description='详情见只在地铁路段有值，详见火车换乘信息列表',
        title='乘坐火车的信息',
    )


class Transit(BaseModel):
    cost: str = Field(..., description='单位：元', title='此换乘方案价格')
    duration: str = Field(..., description='单位：秒', title='此换乘方案预期时间')
    nightflag: str = Field(
        ..., description='0：非夜班车；1：夜班车', title='是否是夜班车'
    )
    walking_distance: str = Field(..., description='单位：米', title='此方案总步行距离')
    distance: str
    missed: str
    segments: List[Segment] = Field(..., title='换乘路段列表')


class Route1(BaseModel):
    origin: str = Field(..., title='起点坐标')
    destination: str = Field(..., title='终点坐标')
    distance: str = Field(..., description='单位：米', title='起点和终点的步行距离')
    taxi_cost: str = Field(..., description='单位：元', title='出租车费用')
    transits: List[Transit] = Field(..., title='公交换乘方案列表')


class V3DirectionTransitIntegratedGetResponse(BaseModel):
    status: str = Field(
        ..., description='\t 值为0或1  1：成功；0：失败', title='返回状态'
    )
    info: str = Field(
        ...,
        description='status为0时，info返回错误原；否则返回“OK”。详情参阅info状态表',
        title='返回的状态信息',
    )
    infocode: str = Field(..., title='')
    count: str = Field(..., title='公交换乘方案数目')
    route: Route1 = Field(..., title='公交换乘信息列表')


class Steps1(BaseModel):
    instruction_: str = Field(
        ..., alias='instruction ', description='路段骑行指示  例如：“骑行54米右转” '
    )
    road: str = Field(
        ...,
        description='此段路道路名称  有可能出现空，需要特别指出，日后会用null表示  例如：“建国门北大街”',
    )
    distance: str = Field(..., description='此段路骑行距离')
    orientation: str = Field(..., description='此段路骑行方向  例如：“南”')
    duration: str = Field(..., description='此段路骑行耗时  单位：秒')
    polyline: str = Field(..., description='此段路骑行的坐标点  格式：X,Y;X1,Y1;X2,Y2')
    action: str = Field(
        ...,
        description='此段路骑行主要动作  内容为中文指示。  骑行·主要动作，可能为空，也可能  为左转、右转、向左前方行驶、向右前方行驶等  ',
    )
    assistant_action: str = Field(
        ..., description='此段路骑行辅助动作  内容为中文提示。  例如：“到达目的地”'
    )


class Paths1(BaseModel):
    distance: str = Field(..., description='起终点的骑行距离  单位：米')
    duration: str = Field(..., description='\t 起终点的骑行时间  单位：秒')
    steps: Steps1 = Field(..., description='具体骑行结果')


class Data(BaseModel):
    origin: str = Field(..., description='\t 起点坐标  格式:X,Y')
    destination: str = Field(..., description='终点坐标  格式:X,Y ')
    paths: Paths1 = Field(..., description='数组  骑行方案列表信息')


class V4DirectionBicyclingGetResponse(BaseModel):
    data: Data = Field(..., description='\t 对象  里面包含具体内容')
    errcode: str = Field(..., description='返回结果码  0，表示成功')
    errdetail: str = Field(..., description='具体错误原因  此字段会详细说明错误原因')
    errmsg: str


class Tmcs(BaseModel):
    distance: str = Field(..., description='单位：米', title='此段路的长度')
    status: str = Field(
        ..., description='未知、畅通、缓行、拥堵、严重拥堵', title='此段路的交通情况'
    )
    polyline: str = Field(..., description='规格：x1,y1;x2,y2', title='此段路的轨迹')


class Step2(BaseModel):
    instruction: str = Field(..., title='行驶指示')
    orientation: str = Field(..., title='方向')
    distance: str = Field(..., description='单位：米', title='此路段距离')
    tolls: str = Field(..., description='单位：元', title='此段收费')
    toll_distance: str = Field(..., description='单位：米', title='收费路段距离')
    toll_road: List[str] = Field(..., title='主要收费道路')
    duration: str = Field(..., title='')
    polyline: str = Field(
        ...,
        description='格式为坐标串，如：116.481247,39.990704;116.481270,39.990726',
        title='此路段坐标点串',
    )
    action: List[str] = Field(..., description='详见驾车动作列表', title='导航主要动作')
    assistant_action: List[str] = Field(
        ..., description='详见驾车动作列表', title='导航辅助动作'
    )
    road: str = Field(..., title='道路名称')
    tmcs: Tmcs


class Path(BaseModel):
    distance: Optional[str] = Field(None, description='单位：米', title='行驶距离\t')
    duration: Optional[str] = Field(
        None, description='单位：秒', title='预计行驶时间\t'
    )
    strategy: Optional[str] = Field(None, title='导航策略\t')
    tolls: Optional[str] = Field(
        None, description='单位：元', title='此导航方案道路收费\t'
    )
    toll_distance: Optional[str] = Field(None, title='收费路段距离\t')
    steps: Optional[List[Step2]] = Field(
        None, description='详情见导航路段信息step列表', title='导航路段\t'
    )
    restriction: Optional[str] = Field(
        None,
        description='0 代表限行已规避或未限行，即该路线没有限行路段 1 代表限行无法规避，即该线路有限行路段',
        title='限行结果\t',
    )
    traffic_lights: Optional[str] = Field(None, title='红绿灯个数\t')


class Route2(BaseModel):
    origin: str = Field(
        ...,
        description='规则： lon，lat（经度，纬度）， “,”分割，如117.500244, 40.417801 经纬度小数点不超过6位',
        title='起点坐标\t',
    )
    destination: str = Field(
        ...,
        description='规则： lon，lat（经度，纬度）， “,”分割，如117.500244, 40.417801 经纬度小数点不超过6位',
        title='终点坐标\t',
    )
    paths: List[Path] = Field(..., title='驾车换乘方案\t')


class V3DirectionDrivingGetResponse(BaseModel):
    status: str = Field(
        ..., description='0：请求失败；1：请求成功', title='结果状态值，值为0或1\t'
    )
    info: str = Field(
        ...,
        description='status为0时，info返回错误原因，否则返回“OK”。详情参阅info状态表',
        title='返回状态说明\t',
    )
    infocode: str = Field(..., title='')
    count: str = Field(..., title='驾车路径规划方案数目\t')
    route: Route2 = Field(..., title='驾车路径规划信息列表\t')


class Steps2(BaseModel):
    adcode: Optional[str] = Field(None, description='途径区域的区域代码')
    road: Optional[str] = Field(None, description='道路名称')
    distance: Optional[str] = Field(None, description='路段距离')
    toll: Optional[str] = Field(
        None, description='道路属性字段，是否收费，0：不收费，1：收费。'
    )
    polyline: Optional[str] = Field(None, description='路段坐标点串')


class Paths2(BaseModel):
    distance: Optional[str] = Field(None, description='行驶距离，单位：米')
    traffic_lights: Optional[str] = Field(None, description='红绿灯个数')
    steps: Optional[Steps2] = Field(None, description='导航路段，列表')


class Tmcs1(BaseModel):
    status: Optional[str] = Field(None, description='路况状态')
    polyline: Optional[str] = Field(None, description='路段坐标点')


class Elements(BaseModel):
    pathindex: Optional[str] = Field(None, description='对应的路线')
    duration: Optional[str] = Field(None, description='总时长，单位：分钟')
    tolls: Optional[str] = Field(None, description='总收费，单位：元')
    restriction: Optional[str] = Field(
        None,
        description='0：代表限行已规避或未限行，即该路线没有限行路段 1：代表限行无法规避，即该线路有限行路段',
    )
    tmcs: Optional[Tmcs1] = Field(None, description='路况信息')


class TimeInfos(BaseModel):
    starttime: Optional[str] = Field(None, description='出发时间，Unix时间戳精确到毫秒')
    elements: Optional[Elements] = Field(None, description='路线列表')


class Data1(BaseModel):
    paths: Optional[Paths2] = Field(None, description='路径规划方案，列表')
    time_infos: Optional[TimeInfos] = Field(
        None, description='不同时间的规划以及信息列表'
    )


class V4EtdDrivingGetResponse(BaseModel):
    errcode: Optional[int] = Field(None, description='返回状态编码，0表示成功')
    errmsg: Optional[str] = Field(
        None, description='\t 返回状态说明。  成功时返回OK，其他错误返回错误信息。'
    )
    errdetail: Optional[str] = Field(None, description='返回错误详细原因')
    data: Optional[Data1] = None


class Result(BaseModel):
    origin_id: Optional[str] = Field(
        None, description='起点坐标，起点坐标序列号（从１开始）'
    )
    dest_id: Optional[str] = Field(
        None, description='终点坐标，终点坐标序列号（从１开始） '
    )
    distance: Optional[str] = Field(None, description='路径距离，单位：米 ')
    duration: Optional[str] = Field(None, description='预计行驶时间，单位：秒 ')


class V3DistanceGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='\t 返回结果状态值，值为0或1，0表示请求失败；1表示请求成功'
    )
    info: Optional[str] = Field(
        None,
        description=' 返回状态说明，status为0时，info返回错误原因；否则返回“OK”。详情参阅[info状态表](https://lbs.amap.com/api/webservice/info/)',
    )
    code: Optional[str] = Field(
        None,
        description='仅在出错的时候显示此字段。  在驾车模式下：  1，指定地点之间没有可以行车的道路  2，起点/终点 距离所有道路均距离过远（例如在海洋/矿业）  3，起点/终点不在中国境内',
    )
    count: Optional[str] = None
    results: Optional[List[Result]] = Field(None, description='\t 距离信息列表')


class District(BaseModel):
    name: Optional[str] = Field(None, description='途径区县名称')
    adcode: Optional[str] = Field(None, description='途径区县adcode')
    polyline: Optional[str] = Field(
        None, description='设置后可返回分路段坐标点串，两点间用“,”分隔'
    )


class Cities(BaseModel):
    adcode: Optional[str] = Field(None, description='途径区域编码')
    citycode: Optional[str] = Field(None, description='\t 途径城市编码')
    city: Optional[str] = Field(None, description='途径城市名称')
    district: Optional[District] = Field(None, description='途径区县信息')


class Navi(BaseModel):
    action: Optional[str] = Field(None, description='导航主要动作指令')
    assistant_action: Optional[str] = Field(None, description='\t 导航辅助动作指令')
    cities: Optional[Cities] = Field(None, description='设置后可返回分段途径城市信息')


class Tmcs2(BaseModel):
    tmc_status: Optional[str] = Field(
        None, description='路况信息，包括：未知、畅通、缓行、拥堵、严重拥堵'
    )
    tmc_distance: Optional[str] = Field(
        None, description='从当前坐标点开始step中路况相同的距离'
    )
    tmc_polyline: Optional[str] = Field(
        None, description='此段路况涉及的道路坐标点串，点间用","分隔'
    )
    navi: Optional[Navi] = Field(None, description='设置后可返回详细导航动作指令')


class Cost(BaseModel):
    duration: Optional[str] = Field(
        None, description='线路耗时，包括方案总耗时及分段step中的耗时'
    )
    tolls: Optional[str] = Field(
        None, description='此路线道路收费，单位：元，包括分段信息'
    )
    toll_distance: Optional[str] = Field(
        None, description='收费路段里程，单位：米，包括分段信息'
    )
    toll_road: Optional[str] = Field(None, description='主要收费道路')
    taxi_fee: Optional[str] = Field(None, description='预计出租车费用，单位：元')
    traffic_lights: Optional[str] = Field(
        None, description='方案中红绿灯个数，单位：个'
    )
    tmcs: Optional[Tmcs2] = Field(None, description='设置后可返回分段路况详情')


class Steps3(BaseModel):
    instruction: Optional[str] = Field(None, description='行驶指示')
    orientation: Optional[str] = Field(None, description='进入道路方向')
    road_name: Optional[str] = Field(None, description='分段道路名称')
    step_distance: Optional[str] = Field(None, description='分段距离信息')
    show_fields: Optional[str] = Field(None, description='可选差异化结果返回')
    cost: Optional[Cost] = Field(None, description='设置后可返回方案所需时间及费用成本')


class Paths3(BaseModel):
    distance: Optional[str] = Field(None, description='方案距离，单位：米')
    restriction: Optional[str] = Field(
        None,
        description='0 代表限行已规避或未限行，即该路线没有限行路段  1 代表限行无法规避，即该线路有限行路段',
    )
    steps: Optional[Steps3] = Field(None, description='路线分段')


class Route3(BaseModel):
    origin: Optional[str] = Field(None, description='起点经纬度')
    destination: Optional[str] = Field(None, description='终点经纬度')
    paths: Optional[Paths3] = Field(None, description='算路方案详情')


class V5DirectionDrivingGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[str] = Field(
        None,
        description='访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见[错误码说明](https://lbs.amap.com/api/webservice/guide/tools/info)。',
    )
    infocode: Optional[str] = Field(
        None, description='返回状态说明,10000代表正确,详情参阅info状态表'
    )
    count: Optional[str] = Field(None, description='路径规划方案总数')
    route: Optional[Route3] = Field(None, description='返回的规划方案列表')


class Navi1(BaseModel):
    action: Optional[str] = Field(None, description='导航主要动作指令')
    assistant_action: Optional[str] = Field(None, description='导航辅助动作指令')
    walk_type: Optional[str] = Field(
        None,
        description='算路结果中存在的道路类型：  0，普通道路 1，人行横道 3，地下通道 4，过街天桥  5，地铁通道 6，公园 7，广场 8，扶梯 9，直梯  10，索道 11，空中通道 12，建筑物穿越通道  13，行人通道 14，游船路线 15，观光车路线 16，滑道  18，扩路 19，道路附属连接线 20，阶梯 21，斜坡  22，桥 23，隧道 30，轮渡',
    )
    polyline: Optional[str] = Field(
        None, description='设置后可返回分路段坐标点串，两点间用“,”分隔'
    )


class Cost1(BaseModel):
    duration: Optional[str] = Field(
        None, description='\t 线路耗时，包括方案总耗时及分段step中的耗时'
    )
    taxi: Optional[str] = Field(None, description='预估打车费用')
    navi: Optional[Navi1] = Field(None, description='设置后可返回详细导航动作指令')


class Steps4(BaseModel):
    instruction: Optional[str] = Field(None, description='步行指示')
    orientation: Optional[str] = Field(None, description='进入道路方向')
    road_name: Optional[str] = Field(None, description='分段道路名称')
    step_distance: Optional[str] = Field(None, description='分段距离信息')
    cost: Optional[Cost1] = Field(
        None,
        description='以下字段如果需要返回，需要通过“show_fields”进行参数类设置设置后可返回方案所需时间及费用成本。注意：steps中不返回taxi字段。',
    )


class Paths4(BaseModel):
    distance: Optional[str] = Field(None, description='方案距离，单位：米')
    steps: Optional[Steps4] = Field(None, description='路线分段')


class Route4(BaseModel):
    origin: Optional[str] = Field(None, description='起点经纬度')
    destination: Optional[str] = Field(None, description='终点经纬度')
    paths: Optional[Paths4] = Field(None, description='算路方案详情')


class V5DirectionWalkingGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[str] = Field(
        None,
        description='访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见错误码说明。',
    )
    infocode: Optional[str] = Field(
        None, description='返回状态说明,10000代表正确,详情参阅info状态表'
    )
    count: Optional[str] = Field(None, description='路径规划方案总数')
    route: Optional[Route4] = Field(None, description='返回的规划方案列表')


class Cost2(BaseModel):
    duration: Optional[str] = Field(
        None, description='线路耗时，包括方案总耗时及分段step中的耗时'
    )
    navi: Optional[Navi1] = Field(None, description='\t 设置后可返回详细导航动作指令')


class Steps5(BaseModel):
    instruction: Optional[str] = Field(None, description='骑行指示')
    orientation: Optional[str] = Field(None, description='进入道路方向')
    road_name: Optional[str] = Field(None, description='分段道路名称')
    step_distance: Optional[str] = Field(None, description='分段距离信息')
    cost: Optional[Cost2] = Field(
        None,
        description='注意以下字段如果需要返回，需要通过“show_fields”进行参数类设置。设置后可返回方案所需时间及费用成本',
    )


class Paths5(BaseModel):
    distance: Optional[str] = Field(None, description='方案距离，单位：米')
    steps: Optional[Steps5] = Field(None, description='路线分段')


class Route5(BaseModel):
    origin: Optional[str] = Field(None, description='起点经纬度')
    destination: Optional[str] = Field(None, description='终点经纬度')
    paths: Optional[Paths5] = Field(None, description='算路方案详情')


class V5DirectionBicyclingGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[str] = Field(
        None,
        description='访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见错误码说明。',
    )
    infocode: Optional[str] = Field(
        None, description='返回状态说明,10000代表正确,详情参阅info状态表'
    )
    count: Optional[str] = Field(None, description='路径规划方案总数')
    route: Optional[Route5] = Field(None, description='返回的规划方案列表')


class Navi3(BaseModel):
    action: Optional[str] = Field(None, description='导航主要动作指令')
    assistant_action: Optional[str] = Field(None, description='导航辅助动作指令')
    walk_type: Optional[str] = Field(
        None,
        description='算路结果中存在的道路类型：  0，普通道路 1，人行横道 3，地下通道 4，过街天桥  5，地铁通道 6，公园 7，广场 8，扶梯 9，直梯  10，索道 11，空中通道 12，建筑物穿越通道  13，行人通道 14，游船路线 15，观光车路线 16，滑道  18，扩路 19，道路附属连接线 20，阶梯 21，斜坡  22，桥 23，隧道 30，轮渡',
    )
    polyline: Optional[str] = None


class Cost3(BaseModel):
    duration: Optional[str] = Field(
        None, description='线路耗时，包括方案总耗时及分段step中的耗时'
    )
    navi: Optional[Navi3] = Field(None, description='设置后可返回详细导航动作指令')


class Steps6(BaseModel):
    instruction: Optional[str] = Field(None, description='骑行指示')
    orientation: Optional[str] = Field(None, description='进入道路方向')
    road_name: Optional[str] = Field(None, description='分段道路名称')
    step_distance: Optional[str] = Field(None, description='\t 分段距离信息')
    cost: Optional[Cost3] = Field(
        None, description='设置后可返回方案所需时间及费用成本'
    )


class Paths6(BaseModel):
    distance: Optional[str] = Field(None, description='方案距离，单位：米')
    steps: Optional[Steps6] = Field(None, description='路线分段')


class Route6(BaseModel):
    origin: Optional[str] = Field(None, description='起点经纬度')
    destination: Optional[str] = Field(None, description='终点经纬度')
    paths: Optional[Paths6] = Field(None, description='算路方案详情')


class V5DirectionElectrobikeGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[str] = Field(
        None,
        description=' 访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见[错误码说明](https://lbs.amap.com/api/webservice/guide/tools/info)。',
    )
    infocode: Optional[str] = Field(
        None, description='返回状态说明,10000代表正确,详情参阅info状态表'
    )
    count: Optional[str] = Field(None, description='路径规划方案总数')
    route: Optional[Route6] = Field(None, description='返回的规划方案列表')


class Navi4(BaseModel):
    action: Optional[str] = Field(None, description='导航主要动作指令')
    assistant_action: Optional[str] = Field(None, description='导航辅助动作指令')
    walk_type: Optional[str] = Field(
        None,
        description='算路结果中存在的道路类型：  0，普通道路 1，人行横道 3，地下通道 4，过街天桥  5，地铁通道 6，公园 7，广场 8，扶梯 9，直梯  10，索道 11，空中通道 12，建筑物穿越通道  13，行人通道 14，游船路线 15，观光车路线 16，滑道  18，扩路 19，道路附属连接线 20，阶梯 21，斜坡  22，桥 23，隧道 30，轮渡',
    )
    polyline: Optional[str] = Field(
        None, description='设置后可返回分路段坐标点串，两点间用“,”分隔'
    )


class Cost4(BaseModel):
    duration: Optional[str] = Field(None, description='线路耗时，方案总耗时')
    taxi_fee: Optional[str] = Field(None, description='预估出租车费用')
    transit_fee: Optional[str] = Field(None, description='各换乘方案总花费')
    navi: Optional[Navi4] = Field(None, description='设置后可返回详细导航动作指令')


class Taxi(BaseModel):
    price: Optional[str] = Field(None, description='打车预计花费金额')
    drivetime: Optional[str] = Field(None, description='打车预计花费时间')
    distance: Optional[str] = Field(None, description='打车距离')
    polyline: Optional[str] = Field(
        None, description='线路点集合，通过show_fields控制返回与否'
    )
    startpoint: Optional[str] = Field(None, description='打车起点经纬度')
    startname: Optional[str] = Field(None, description='打车起点名称')
    endpoint: Optional[str] = Field(None, description='打车终点经纬度')
    endname: Optional[str] = Field(None, description='打车终点名称')
    cost: Optional[Cost4] = Field(
        None,
        description='设置后可返回方案所需时间及费用成本注意：taxi_fee只在route中返回，transit_fee只在segments下返回。分段steps下不返回cost。',
    )


class Segments(BaseModel):
    walking: Optional[str] = Field(None, description='此分段中需要步行导航的信息')
    steps: Optional[str] = Field(None, description='\t 参考v3老接口')
    bus: Optional[str] = Field(None, description='此分段中需要公交导航的信息')
    railway: Optional[str] = Field(None, description='此分段中需要火车的信息')
    taxi: Optional[Taxi] = Field(None, description='打车')


class Transits(BaseModel):
    distance: Optional[str] = Field(None, description='本条路线的总距离，单位：米')
    nightflag: Optional[int] = Field(None, description='0：非夜班车；1：夜班车')
    segments: Optional[Segments] = Field(None, description='路线分段')


class Route7(BaseModel):
    origin: Optional[str] = Field(None, description='起点经纬度')
    destination: Optional[str] = Field(None, description='终点经纬度')
    transits: Optional[Transits] = Field(None, description='公交方案列表')


class V5DirectionTransitIntegratedGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[str] = Field(
        None,
        description='访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见[错误码说明](https://lbs.amap.com/api/webservice/guide/tools/info)。',
    )
    infocode: Optional[str] = Field(
        None, description='返回状态说明,10000代表正确,详情参阅info状态表'
    )
    count: Optional[str] = Field(None, description='路径规划方案总数')
    route: Optional[Route7] = Field(None, description='返回的规划方案列表')


class District1(BaseModel):
    citycode: Optional[str] = Field(None, description='城市编码')
    adcode: Optional[str] = Field(
        None, description='区域编码  街道没有独有的adcode，均继承父类（区县）的adcode'
    )
    name: Optional[str] = Field(None, description='行政区名称')
    field95: Optional[str] = Field(
        None,
        description='行政区边界坐标点  当一个行政区范围，由完全分隔两块或者多块的地块组  成，每块地的 polyline 坐标串以 | 分隔 。  如北京 的 朝阳区',
    )
    center: Optional[str] = Field(None, description='区域中心点')
    level: Optional[str] = Field(
        None,
        description='行政区划级别  country:国家  province:省份（直辖市会在province和city显示）  city:市（直辖市会在province和city显示）  district:区县  street:街道',
    )
    districts: Optional[str] = Field(
        None, description='下级行政区列表，包含district元素'
    )


class Districts(BaseModel):
    district: Optional[District1] = Field(None, description='行政区信息')


class Suggestion(BaseModel):
    keywords: Optional[str] = Field(None, description='建议关键字列表')
    cites: Optional[str] = Field(None, description='建议城市列表')
    districts: Optional[Districts] = Field(None, description='行政区列表')


class V3ConfigDistrictGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='\t 返回结果状态值  值为0或1，0表示失败；1表示成功'
    )
    info: Optional[str] = Field(
        None,
        description='返回状态说明  返回状态说明，status为0时，info返回错误原因，否则返回“OK”。',
    )
    infocode: Optional[str] = Field(
        None, description='状态码  返回状态说明，10000代表正确，详情参阅info状态表'
    )
    suggestion: Optional[Suggestion] = Field(None, description='建议结果列表')


class Geocodes(BaseModel):
    formatted_address: Optional[str] = Field(
        None, description='结构化地址信息  省份＋城市＋区县＋城镇＋乡村＋街道＋门牌号码'
    )
    country: Optional[str] = Field(None, description='国家  国内地址默认返回中国')
    province: Optional[str] = Field(
        None,
        description='地址所在的省份名  例如：北京市。此处需要注意的是，中国的四大直辖市也算作省级单位。',
    )
    city: Optional[str] = Field(None, description='地址所在的城市名  例如：北京市')
    citycode: Optional[str] = Field(None, description='城市编码  例如：010')
    district: Optional[str] = Field(None, description='地址所在的区  例如：朝阳区')
    street: Optional[str] = Field(None, description='街道  例如：阜通东大街')
    number: Optional[str] = Field(None, description='门牌  例如：6号')
    adcode: Optional[str] = Field(None, description='区域编码  例如：110101')
    location: Optional[str] = Field(None, description='坐标点  经度，纬度')
    level: Optional[str] = Field(
        None, description='匹配级别  参见下方的地理编码匹配级别列表'
    )


class V3GeocodeGeoGetResponse(BaseModel):
    status: Optional[str] = Field(
        None,
        description='返回结果状态值  返回值为 0 或 1，0 表示请求失败；1 表示请求成功。',
    )
    count: Optional[str] = Field(None, description='返回结果数目  返回结果的个数。')
    info: Optional[str] = Field(
        None,
        description='返回状态说明,当 status 为 0 时，info 会返回具体错误原因，否则返回“OK”。详情可以参阅[info状态表](https://lbs.amap.com/api/webservice/guide/tools/info)',
    )
    geocodes: Optional[Geocodes] = Field(
        None, description='地理编码信息列表  结果对象列表，包括下述字段：'
    )


class Neighborhood(BaseModel):
    name: str = Field(..., description='社区名称  例如：北京大学')
    type: str = Field(..., description='POI类型  例如：科教文化服务;学校;高等院校')


class Building(BaseModel):
    name: str = Field(..., description='建筑名称  例如：万达广场')
    type: str = Field(..., description='类型  例如：科教文化服务;学校;高等院校')


class StreetNumber(BaseModel):
    street: str = Field(..., description='街道名称  例如：中关村北二条')
    number: str = Field(..., description='门牌号  例如：3号')
    location: str = Field(..., description='坐标点  经纬度坐标点：经度，纬度')
    direction: str = Field(..., description='方向  坐标点所处街道方位')
    distance: str = Field(..., description='门牌地址到请求坐标的距离  单位：米')


class BusinessAreas(BaseModel):
    businessArea: str = Field(..., description='商圈信息')
    location: str = Field(..., description='商圈中心点经纬度')
    name: str = Field(..., description=' 商圈名称    例如：颐和园 ')
    id: str = Field(..., description='商圈所在区域的adcode    例如：朝阳区/海淀区 ')


class AddressComponent(BaseModel):
    province: str = Field(..., description='坐标点所在省名称  例如：北京市')
    city: str = Field(
        ...,
        description='坐标点所在城市名称，请注意：当城市是省直辖县时返回为空，以及城市为北京、上海、天津、重庆四个直辖市时，该字段返回为空；[省直辖县列表](https://lbs.amap.com/faq/webservice/webservice-api/geocoding/43267)',
    )
    citycode: str = Field(..., description='城市编码  例如：010')
    district: str = Field(..., description='坐标点所在区  例如：海淀区')
    adcode: str = Field(..., description='行政区编码  例如：110108')
    township: str = Field(
        ...,
        description='坐标点所在乡镇/街道（此街道为社区街道，不是道路信息）  例如：燕园街道',
    )
    towncode: str = Field(..., description='乡镇街道编码  例如：110101001000')
    neighborhood: Neighborhood = Field(..., description='社区信息列表')
    building: Building = Field(..., description='楼信息列表')
    streetNumber: StreetNumber = Field(..., description='门牌信息列表')
    seaArea: str = Field(..., description='所属海域信息  例如：渤海')
    businessAreas: BusinessAreas = Field(..., description='经纬度所属商圈列表')


class Road(BaseModel):
    id: str = Field(..., description='道路id')
    name: str = Field(..., description='道路名称')
    distance: str = Field(..., description='道路到请求坐标的距离  单位：米')
    direction: str = Field(..., description='方位  输入点和此路的相对方位')
    location: str = Field(..., description='\t 坐标点')


class Roads(BaseModel):
    road: Road = Field(..., description='道路信息')


class Roadinter(BaseModel):
    distance: str = Field(..., description='交叉路口到请求坐标的距离  单位：米')
    direction: str = Field(..., description='方位  输入点相对路口的方位')
    location: str = Field(..., description='路口经纬度')
    first_id: str = Field(..., description='第一条道路id')
    first_name: str = Field(..., description='第一条道路名称')
    second_id: str = Field(..., description='第二条道路id')
    second_name: str = Field(..., description='第二条道路名称')


class Roadinters(BaseModel):
    roadinter: Roadinter = Field(..., description='道路交叉口')


class Poi(BaseModel):
    id: str = Field(..., description='poi的id')
    name: str = Field(..., description='poi点名称')
    type: str = Field(..., description='poi类型')
    tel: str = Field(..., description='电话')
    distance: str = Field(..., description='该POI的中心点到请求坐标的距离  单位：米')
    direction: str = Field(..., description='方向  为输入点相对建筑物的方位')
    address: str = Field(..., description='poi地址信息')
    location: str = Field(..., description='坐标点')
    businessarea: str = Field(..., description='poi所在商圈名称')


class Pois(BaseModel):
    poi: Poi = Field(..., description='poi信息列表')


class Aoi(BaseModel):
    id: str = Field(..., description='所属 aoi的id')
    name: str = Field(..., description='所属 aoi 名称')
    adcode: str = Field(..., description='所属 aoi 所在区域编码')
    location: str = Field(..., description='所属 aoi 中心点坐标')
    area: str = Field(..., description='所属aoi点面积  单位：平方米')
    distance: str = Field(
        ...,
        description='输入经纬度是否在aoi面之中   0，代表在aoi内  其余整数代表距离AOI的距离',
    )


class Aois(BaseModel):
    aoi: Aoi = Field(..., description='aoi信息')


class Regeocodes(BaseModel):
    formatted_address: str = Field(
        ...,
        description='结构化地址信息  结构化地址信息包括：省份＋城市＋区县＋城镇＋乡村＋街道＋门牌号码  如果坐标点处于海域范围内，则结构化地址信息为：省份＋城市＋区县＋海域信息',
    )
    addressComponent: AddressComponent = Field(..., description='地址元素列表')
    roads: Roads = Field(
        ..., description='道路信息列表  请求参数 extensions 为 all 时返回如下内容'
    )
    roadinters: Roadinters = Field(
        ..., description='道路交叉口列表  请求参数 extensions 为 all 时返回如下内容'
    )
    pois: Pois = Field(
        ..., description='poi信息列表  请求参数 extensions 为 all 时返回如下内容'
    )
    aois: Aois = Field(
        ..., description='aoi信息列表  请求参数 extensions 为 all 时返回如下内容'
    )


class V3GeocodeRegeoGetResponse(BaseModel):
    status: str = Field(
        ...,
        description='返回结果状态值  返回值为 0 或 1，0 表示请求失败；1 表示请求成功。',
    )
    info: str = Field(
        ...,
        description='返回状态说明，当 status 为 0 时，info 会返回具体错误原因，否则返回“OK”。详情可以参考  [info状态表](https://lbs.amap.com/api/webservice/guide/tools/info)',
    )
    regeocodes: Regeocodes = Field(
        ...,
        description='逆地理编码列表  batch 字段设置为 true 时为批量请求，此时 regeocodes 标签返回，标签下为 regeocode 对象列表；batch 为false 时为单个请求，会返回 regeocode 对象；regeocode 对象包含的数据如下：',
    )


class V3PlaceTextGetRequest(BaseModel):
    pass


class City(BaseModel):
    name: str = Field(..., title='名称')
    num: str = Field(..., title='该城市包含此关键字的个数')
    citycode: str = Field(..., title='该城市的citycode')
    adcode: str = Field(..., title='该城市的adcode')


class Suggestion1(BaseModel):
    keywords: List[str] = Field(..., title='关键字')
    cities: List[City] = Field(..., title='城市列表')


class IndoorData(BaseModel):
    cpid: List[str] = Field(
        ...,
        description='如果当前POI为建筑物类POI，则cpid为自身POI ID；如果当前POI为商铺类POI，则cpid为其所在建筑物的POI ID',
        title='当前POI的父级POI',
    )
    floor: List[str] = Field(
        ..., description='一般会用数字表示，例如8', title='楼层索引'
    )
    truefloor: List[str] = Field(
        ..., description='一般会带有字母，例如F8', title='所在楼层'
    )
    cmsid: List[str]


class BizExt(BaseModel):
    rating: List[str] = Field(
        ..., description='仅存在于餐饮、酒店、景点、影院类POI之下', title='评分'
    )
    cost: List[str] = Field(
        ..., description='仅存在于餐饮、酒店、景点、影院类POI之下 ', title='人均消费'
    )


class Child(BaseModel):
    id: str
    name: str
    sname: str
    location: str
    address: str
    distance: str
    subtype: str
    typecode: str


class Photo(BaseModel):
    title: List[str] = Field(..., title='图片介绍')
    url: str = Field(..., title='具体链接')


class Pois1(BaseModel):
    id: str = Field(..., title='唯一ID')
    parent: List[str] = Field(
        ...,
        description='当前POI如果有父POI，则返回父POI的ID。可能为空',
        title='父POI的ID',
    )
    childtype: List[str] = Field(..., title='')
    name: str = Field(..., title='名称')
    tag: List[str] = Field(
        ...,
        description='主要出现在美食类POI中，代表特色菜  例如“烤鱼,麻辣香锅,老干妈回锅肉”  extensions=all时返回',
        title=' 该POI的特色内容',
    )
    type: str = Field(
        ...,
        description=' 顺序为大类、中类、小类  例如：餐饮服务;中餐厅;特色/地方风味餐厅',
        title='兴趣点类型',
    )
    typecode: str = Field(..., description='例如：050118', title='兴趣点类型编码')
    biz_type: List[str] = Field(..., title='行业类型')
    address: str = Field(..., description='东四环中路189号百盛北门', title='地址')
    location: str = Field(..., description='格式：X,Y', title='经纬度')
    tel: List[str] = Field(..., title='POI的电话')
    postcode: List[str] = Field(..., description=' extensions=all时返回', title='邮编')
    website: List[str] = Field(
        ..., description=' extensions=all时返回', title='POI的网址'
    )
    email: List[str] = Field(
        ..., description=' extensions=all时返回', title='POI的电子邮箱'
    )
    pcode: str = Field(
        ..., description=' extensions=all时返回', title='POI所在省份编码'
    )
    pname: str = Field(
        ...,
        description='若是直辖市的时候，此处直接显示市名，例如北京市',
        title='POI所在省份名称',
    )
    citycode: str = Field(..., description=' extensions=all时返回', title='城市编码')
    cityname: str = Field(
        ...,
        description=' 若是直辖市的时候，此处直接显示市名，例如北京市 ',
        title='城市名',
    )
    adcode: str = Field(..., description=' extensions=all时返回', title='区域编码')
    adname: str = Field(..., description='区县级别的返回，例如朝阳区', title='区域名称')
    parking_type: str = Field(
        ...,
        description=' 仅在停车场类型POI的时候显示该字段  展示停车场类型，包括：地下、地面、路边   extensions=all的时候显示 ',
        title='停车场类型',
    )
    importance: List[str] = Field(..., title='')
    shopid: List[str]
    shopinfo: str
    poiweight: List[str] = Field(..., title='')
    gridcode: str = Field(..., description=' extensions=all时返回', title='地理格ID')
    distance: List[str] = Field(..., description='离中心点距离', title='')
    navi_poiid: List[str] = Field(
        ..., description=' extensions=all时返回', title='POI导航id'
    )
    entr_location: List[str] = Field(
        ...,
        description=' extensions=all时返回，也可用作于POI的到达点；',
        title='POI的入口经纬度',
    )
    business_area: List[str] = Field(
        ..., description=' extensions=all时返回', title='所属商圈'
    )
    exit_location: List[str] = Field(
        ..., description='目前不会返回内容；', title='POI的出口经纬度'
    )
    match: str = Field(..., title='')
    recommend: str
    timestamp: str
    alias: List[str] = Field(..., description=' extensions=all时返回', title='别名')
    indoor_map: str = Field(
        ...,
        description='1，表示有室内相关数据  0，代表没有室内相关数据   extensions=all时返回',
        title='是否有室内地图标志',
    )
    indoor_data: IndoorData = Field(
        ...,
        description=' 当indoor_map=0时，字段为空   extensions=all时返回',
        title='室内地图相关数据',
    )
    groupbuy_num: str = Field(..., description='此字段逐渐废弃', title='团购数据')
    discount_num: str = Field(..., description='此字段逐渐废弃 ', title='优惠信息数目')
    biz_ext: BizExt = Field(..., description=' extensions=all时返回', title='深度信息')
    event: List[str] = Field(..., title='')
    children: List[Child]
    photos: List[Photo] = Field(
        ..., description='extensions=all时返回', title='照片相关信息'
    )


class V3PlaceTextGetResponse(BaseModel):
    status: str = Field(
        ..., description='0：请求失败；1：请求成功', title='结果状态值，值为0或1'
    )
    info: str = Field(
        ...,
        description='status为0时，info返回错误原因，否则返回“OK”。详情参阅info状态表',
        title='返回状态说明',
    )
    infocode: str = Field(..., title='')
    count: str = Field(..., title='搜索方案数目')
    suggestion: Suggestion1 = Field(
        ...,
        description='当搜索的文本关键字在限定城市中没有返回时会返回建议城市列表；',
        title='城市建议列表',
    )
    pois: List[Pois1] = Field(..., title='搜索POI信息列表')


class Items(BaseModel):
    type: Optional[str] = None


class Keywords(BaseModel):
    type: Optional[str] = None
    items: Optional[Items] = None
    description: Optional[str] = None


class Cities1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items] = None
    description: Optional[str] = None


class Properties1(BaseModel):
    keywords: Optional[Keywords] = None
    cities: Optional[Cities1] = None


class Suggestion2(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties1] = None
    required: Optional[List[str]] = None
    description: Optional[str] = None


class Count(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Infocode(BaseModel):
    type: Optional[str] = None


class Parent(BaseModel):
    type: Optional[List[str]] = None
    items: Optional[Dict[str, Any]] = None
    description: Optional[str] = None


class Distance(BaseModel):
    type: Optional[str] = None
    items: Optional[Items] = None
    description: Optional[str] = None


class Pcode(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Importance(BaseModel):
    type: Optional[str] = None
    items: Optional[Items] = None


class Cost5(BaseModel):
    type: Optional[str] = None
    items: Optional[Items] = None
    description: Optional[str] = None


class Rating(BaseModel):
    type: Optional[str] = None
    items: Optional[Items] = None
    description: Optional[str] = None


class Properties3(BaseModel):
    cost: Optional[Cost5] = None
    rating: Optional[Rating] = None


class BizExt1(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties3] = None
    required: Optional[List[str]] = None
    description: Optional[str] = None


class Recommend(BaseModel):
    type: Optional[str] = None


class Type(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Title(BaseModel):
    type: Optional[List[str]] = None
    items: Optional[Dict[str, Any]] = None


class Url(BaseModel):
    type: Optional[str] = None


class Properties4(BaseModel):
    title: Optional[Title] = None
    url: Optional[Url] = None


class Items7(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties4] = None
    required: Optional[List[str]] = None


class Photos(BaseModel):
    type: Optional[str] = None
    items: Optional[Items7] = None
    description: Optional[str] = None


class DiscountNum(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Gridcode(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Typecode(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Shopinfo(BaseModel):
    type: Optional[str] = None


class Items8(BaseModel):
    type: Optional[str] = None


class Poiweight(BaseModel):
    type: Optional[str] = None
    items: Optional[Items8] = None


class Citycode(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Adname(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Address(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Distance1(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Subtype(BaseModel):
    type: Optional[str] = None


class Sname(BaseModel):
    type: Optional[str] = None


class Name(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Location(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Id(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Properties5(BaseModel):
    typecode: Optional[Typecode] = None
    address: Optional[Address] = None
    distance: Optional[Distance1] = None
    subtype: Optional[Subtype] = None
    sname: Optional[Sname] = None
    name: Optional[Name] = None
    location: Optional[Location] = None
    id: Optional[Id] = None


class Items9(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties5] = None
    required: Optional[List[str]] = None


class Children(BaseModel):
    type: Optional[str] = None
    items: Optional[Items9] = None
    description: Optional[str] = None


class Items10(BaseModel):
    type: Optional[str] = None


class Alias(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None
    description: Optional[str] = None


class Tel(BaseModel):
    type: Optional[List[str]] = None
    items: Optional[Dict[str, Any]] = None
    description: Optional[str] = None


class Tag(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None
    description: Optional[str] = None


class Event(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None


class EntrLocation(BaseModel):
    type: Optional[List[str]] = None
    items: Optional[Dict[str, Any]] = None
    description: Optional[str] = None


class IndoorMap(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Email(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None
    description: Optional[str] = None


class Timestamp(BaseModel):
    type: Optional[str] = None


class Website(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None
    description: Optional[str] = None


class Adcode(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Pname(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class BizType(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None
    description: Optional[str] = None


class Cityname(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Postcode(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None
    description: Optional[str] = None


class Match(BaseModel):
    type: Optional[str] = None


class BusinessArea(BaseModel):
    type: Optional[List[str]] = None
    items: Optional[Dict[str, Any]] = None
    description: Optional[str] = None


class Cmsid(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None


class Truefloor(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None
    description: Optional[str] = None


class Cpid(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None
    description: Optional[str] = None


class Floor(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None
    description: Optional[str] = None


class Properties6(BaseModel):
    cmsid: Optional[Cmsid] = None
    truefloor: Optional[Truefloor] = None
    cpid: Optional[Cpid] = None
    floor: Optional[Floor] = None


class IndoorData1(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties6] = None
    required: Optional[List[str]] = None
    description: Optional[str] = None


class Childtype(BaseModel):
    type: Optional[List[str]] = None
    items: Optional[Dict[str, Any]] = None


class ExitLocation(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None
    description: Optional[str] = None


class Shopid(BaseModel):
    type: Optional[str] = None
    items: Optional[Items10] = None


class NaviPoiid(BaseModel):
    type: Optional[List[str]] = None
    items: Optional[Dict[str, Any]] = None
    description: Optional[str] = None


class GroupbuyNum(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Properties2(BaseModel):
    parent: Optional[Parent] = Field(
        None, description='父POI的ID  当前POI如果有父POI，则返回父POI的ID。可能为空'
    )
    distance: Optional[Distance] = Field(
        None, description='\t 离中心点距离  单位：米；仅在周边搜索的时候有值返回'
    )
    pcode: Optional[Pcode] = Field(
        None, description='POI所在省份编码   extensions=all时返回'
    )
    importance: Optional[Importance] = None
    biz_ext: Optional[BizExt1] = Field(
        None, description='深度信息   extensions=all时返回'
    )
    recommend: Optional[Recommend] = None
    type: Optional[Type] = Field(
        None,
        description='兴趣点类型  顺序为大类、中类、小类  例如：餐饮服务;中餐厅;特色/地方风味餐厅',
    )
    photos: Optional[Photos] = Field(
        None, description='照片相关信息  extensions=all时返回'
    )
    discount_num: Optional[DiscountNum] = Field(
        None, description='优惠信息数目  此字段逐渐废弃 '
    )
    gridcode: Optional[Gridcode] = Field(
        None, description='\t 地理格ID   extensions=all时返回'
    )
    typecode: Optional[Typecode] = Field(
        None, description='兴趣点类型编码  例如：050118'
    )
    shopinfo: Optional[Shopinfo] = None
    poiweight: Optional[Poiweight] = None
    citycode: Optional[Citycode] = Field(None, description='该城市的citycode')
    adname: Optional[Adname] = Field(
        None, description='区域名称  区县级别的返回，例如朝阳区'
    )
    children: Optional[Children] = None
    alias: Optional[Alias] = Field(None, description='别名   extensions=all时返回')
    tel: Optional[Tel] = Field(None, description='\t POI的电话')
    id: Optional[Id] = Field(None, description='唯一ID')
    tag: Optional[Tag] = Field(
        None,
        description='该POI的特色内容   主要出现在美食类POI中，代表特色菜  例如“烤鱼,麻辣香锅,老干妈回锅肉”  extensions=all时返回',
    )
    event: Optional[Event] = None
    entr_location: Optional[EntrLocation] = Field(
        None,
        description='POI的入口经纬度   extensions=all时返回，也可用作于POI的到达点；',
    )
    indoor_map: Optional[IndoorMap] = Field(
        None,
        description='是否有室内地图标志  1，表示有室内相关数据  0，代表没有室内相关数据   extensions=all时返回',
    )
    email: Optional[Email] = Field(
        None, description='POI的电子邮箱   extensions=all时返回'
    )
    timestamp: Optional[Timestamp] = None
    website: Optional[Website] = Field(
        None, description='POI的网址   extensions=all时返回'
    )
    address: Optional[Address] = Field(
        None, description='地址  东四环中路189号百盛北门'
    )
    adcode: Optional[Adcode] = Field(None, description='该城市的adcode')
    pname: Optional[Pname] = Field(
        None,
        description='\t POI所在省份名称  若是直辖市的时候，此处直接显示市名，例如北京市',
    )
    biz_type: Optional[BizType] = Field(None, description='行业类型')
    cityname: Optional[Cityname] = Field(
        None, description='\t 城市名   若是直辖市的时候，此处直接显示市名，例如北京市 '
    )
    postcode: Optional[Postcode] = Field(
        None, description='邮编   extensions=all时返回'
    )
    match: Optional[Match] = None
    business_area: Optional[BusinessArea] = Field(
        None, description='所属商圈   extensions=all时返回'
    )
    indoor_data: Optional[IndoorData1] = Field(
        None,
        description='室内地图相关数据  当indoor_map=0时，字段为空   extensions=all时返回 ',
    )
    childtype: Optional[Childtype] = None
    exit_location: Optional[ExitLocation] = Field(
        None, description='POI的出口经纬度  目前不会返回内容；'
    )
    name: Optional[Name] = Field(None, description='名称')
    location: Optional[Location] = Field(None, description='\t 经纬度  格式：X,Y')
    shopid: Optional[Shopid] = None
    navi_poiid: Optional[NaviPoiid] = Field(
        None, description='POI导航id   extensions=all时返回'
    )
    groupbuy_num: Optional[GroupbuyNum] = Field(
        None, description='团购数据  此字段逐渐废弃'
    )


class Items2(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties2] = None
    required: Optional[List[str]] = None


class Pois2(BaseModel):
    type: Optional[str] = None
    items: Optional[Items2] = None
    description: Optional[str] = None


class Status(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Info(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Properties(BaseModel):
    suggestion: Optional[Suggestion2] = Field(
        None,
        description='城市建议列表  当搜索的文本关键字在限定城市中没有返回时会返回建议城市列表；',
    )
    count: Optional[Count] = Field(None, description='搜索方案数目(最大值为1000)')
    infocode: Optional[Infocode] = None
    pois: Optional[Pois2] = Field(None, description='搜索POI信息列表')
    status: Optional[Status] = Field(
        None, description='结果状态值，值为0或1  0：请求失败；1：请求成功'
    )
    info: Optional[Info] = Field(
        None,
        description='| 返回状态说明 | status为0时，info返回错误原因，否则返回“OK”。详情参阅[info状态表](https://lbs.amap.com/api/webservice/info/) | | ------------ | ------------------------------------------------------------ | |              |                                                              |',
    )


class V3PlaceAroundGetResponse(BaseModel):
    type: Optional[str] = Field(
        None,
        description='兴趣点类型  顺序为大类、中类、小类  例如：餐饮服务;中餐厅;特色/地方风味餐厅',
    )
    properties: Optional[Properties] = None
    required: Optional[List[str]] = None


class Items23(BaseModel):
    type: Optional[str] = None


class Keywords1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items23] = None
    description: Optional[str] = None


class Cities2(BaseModel):
    type: Optional[str] = None
    items: Optional[Items23] = None
    description: Optional[str] = None


class Properties8(BaseModel):
    keywords: Optional[Keywords1] = Field(
        None,
        description='查询关键字  规则： 多个关键字用“|”分割  若不指定city，并且搜索的为泛词（例如“美食”）的情况下，返回的内容为城市列表以及此城市内有多少结果符合要求。',
    )
    cities: Optional[Cities2] = Field(None, description='城市列表')


class Suggestion3(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties8] = None
    required: Optional[List[str]] = None
    description: Optional[str] = None


class Distance2(BaseModel):
    type: Optional[str] = None
    items: Optional[Items23] = None
    description: Optional[str] = None


class Importance1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items23] = None


class Cost6(BaseModel):
    type: Optional[str] = None
    items: Optional[Items23] = None
    description: Optional[str] = None


class Rating1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items23] = None
    description: Optional[str] = None


class Properties10(BaseModel):
    cost: Optional[Cost6] = None
    rating: Optional[Rating1] = None


class BizExt2(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties10] = None
    required: Optional[List[str]] = None
    description: Optional[str] = None


class Properties11(BaseModel):
    title: Optional[Title] = None
    url: Optional[Url] = None


class Items30(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties11] = None
    required: Optional[List[str]] = None


class Photos1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items30] = None
    description: Optional[str] = None


class Items31(BaseModel):
    type: Optional[str] = None


class Poiweight1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items31] = None


class Distance3(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Properties12(BaseModel):
    typecode: Optional[Typecode] = None
    address: Optional[Address] = None
    distance: Optional[Distance3] = None
    subtype: Optional[Subtype] = None
    sname: Optional[Sname] = None
    name: Optional[Name] = None
    location: Optional[Location] = None
    id: Optional[Id] = None


class Items32(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties12] = None
    required: Optional[List[str]] = None


class Children1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items32] = None
    description: Optional[str] = None


class Items33(BaseModel):
    type: Optional[str] = None


class Alias1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None
    description: Optional[str] = None


class Tag1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None
    description: Optional[str] = None


class Event1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None


class Email1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None
    description: Optional[str] = None


class Website1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None
    description: Optional[str] = None


class BizType1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None
    description: Optional[str] = None


class Postcode1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None
    description: Optional[str] = None


class Cmsid1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None


class Truefloor1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None
    description: Optional[str] = None


class Cpid1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None
    description: Optional[str] = None


class Floor1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None
    description: Optional[str] = None


class Properties13(BaseModel):
    cmsid: Optional[Cmsid1] = None
    truefloor: Optional[Truefloor1] = None
    cpid: Optional[Cpid1] = None
    floor: Optional[Floor1] = None


class IndoorData2(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties13] = None
    required: Optional[List[str]] = None
    description: Optional[str] = None


class ExitLocation1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None
    description: Optional[str] = None


class Shopid1(BaseModel):
    type: Optional[str] = None
    items: Optional[Items33] = None


class Properties9(BaseModel):
    parent: Optional[Parent] = None
    distance: Optional[Distance2] = None
    pcode: Optional[Pcode] = None
    importance: Optional[Importance1] = None
    biz_ext: Optional[BizExt2] = None
    recommend: Optional[Recommend] = None
    type: Optional[Type] = None
    photos: Optional[Photos1] = None
    discount_num: Optional[DiscountNum] = None
    gridcode: Optional[Gridcode] = None
    typecode: Optional[Typecode] = None
    shopinfo: Optional[Shopinfo] = None
    poiweight: Optional[Poiweight1] = None
    citycode: Optional[Citycode] = None
    adname: Optional[Adname] = None
    children: Optional[Children1] = None
    alias: Optional[Alias1] = None
    tel: Optional[Tel] = None
    id: Optional[Id] = None
    tag: Optional[Tag1] = None
    event: Optional[Event1] = None
    entr_location: Optional[EntrLocation] = None
    indoor_map: Optional[IndoorMap] = None
    email: Optional[Email1] = None
    timestamp: Optional[Timestamp] = None
    website: Optional[Website1] = None
    address: Optional[Address] = None
    adcode: Optional[Adcode] = None
    pname: Optional[Pname] = None
    biz_type: Optional[BizType1] = None
    cityname: Optional[Cityname] = None
    postcode: Optional[Postcode1] = None
    match: Optional[Match] = None
    business_area: Optional[BusinessArea] = None
    indoor_data: Optional[IndoorData2] = None
    childtype: Optional[Childtype] = None
    exit_location: Optional[ExitLocation1] = None
    name: Optional[Name] = None
    location: Optional[Location] = None
    shopid: Optional[Shopid1] = None
    navi_poiid: Optional[NaviPoiid] = None
    groupbuy_num: Optional[GroupbuyNum] = None


class Items25(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties9] = None
    required: Optional[List[str]] = None


class Pois3(BaseModel):
    type: Optional[str] = None
    items: Optional[Items25] = None
    description: Optional[str] = None


class Properties7(BaseModel):
    suggestion: Optional[Suggestion3] = Field(
        None,
        description='城市建议列表  当搜索的文本关键字在限定城市中没有返回时会返回建议城市列表；',
    )
    count: Optional[Count] = Field(None, description='搜索方案数目(最大值为1000)')
    infocode: Optional[Infocode] = None
    pois: Optional[Pois3] = Field(None, description='搜索POI信息列表')
    status: Optional[Status] = Field(
        None, description='结果状态值，值为0或1  0：请求失败；1：请求成功'
    )
    info: Optional[Info] = Field(
        None,
        description='| 返回状态说明 | status为0时，info返回错误原因，否则返回“OK”。详情参阅[info状态表](https://lbs.amap.com/api/webservice/info/) | | ------------ | ------------------------------------------------------------ | |              |                                                              |',
    )


class V3PlacePolygonGetResponse(BaseModel):
    type: Optional[str] = Field(
        None,
        description='\t 兴趣点类型  顺序为大类、中类、小类  例如：餐饮服务;中餐厅;特色/地方风味餐厅',
    )
    properties: Optional[Properties7] = None
    required: Optional[List[str]] = None


class IndoorData3(BaseModel):
    cpid: str
    floor: List[str]
    truefloor: List[str]
    cmsid: str


class BizExt3(BaseModel):
    rating: List[str] = Field(
        ..., description='仅存在于餐饮、酒店、景点、影院类POI之下', title='评分'
    )
    cost: List[str] = Field(
        ..., description='仅存在于餐饮、酒店、景点、影院类POI之下 ', title='人均消费'
    )


class Pois4(BaseModel):
    id: Optional[str] = Field(None, title='唯一ID')
    parent: Optional[List[str]] = Field(
        None,
        description='当前POI如果有父POI，则返回父POI的ID。可能为空',
        title='父POI的ID',
    )
    childtype: Optional[List[str]] = Field(None, title='')
    name: Optional[str] = Field(None, title='名称')
    tag: Optional[List[str]] = Field(
        None,
        description='主要出现在美食类POI中，代表特色菜  例如“烤鱼,麻辣香锅,老干妈回锅肉”  extensions=all时返回',
        title=' 该POI的特色内容',
    )
    type: Optional[str] = Field(
        None,
        description=' 顺序为大类、中类、小类  例如：餐饮服务;中餐厅;特色/地方风味餐厅',
        title='兴趣点类型',
    )
    typecode: Optional[str] = Field(
        None, description='例如：050118', title='兴趣点类型编码'
    )
    biz_type: Optional[List[str]] = Field(None, title='行业类型')
    address: Optional[str] = Field(
        None, description='东四环中路189号百盛北门', title='地址'
    )
    location: Optional[str] = Field(None, description='格式：X,Y', title='经纬度')
    tel: Optional[List[str]] = Field(None, title='POI的电话')
    postcode: Optional[List[str]] = Field(
        None, description=' extensions=all时返回', title='邮编'
    )
    website: Optional[List[str]] = Field(
        None, description=' extensions=all时返回', title='POI的网址'
    )
    email: Optional[List[str]] = Field(
        None, description=' extensions=all时返回', title='POI的电子邮箱'
    )
    pcode: Optional[str] = Field(
        None, description=' extensions=all时返回', title='POI所在省份编码'
    )
    pname: Optional[str] = Field(
        None,
        description='若是直辖市的时候，此处直接显示市名，例如北京市',
        title='POI所在省份名称',
    )
    citycode: Optional[str] = Field(
        None, description=' extensions=all时返回', title='城市编码'
    )
    cityname: Optional[str] = Field(
        None,
        description=' 若是直辖市的时候，此处直接显示市名，例如北京市 ',
        title='城市名',
    )
    adcode: Optional[str] = Field(
        None, description=' extensions=all时返回', title='区域编码'
    )
    adname: Optional[str] = Field(
        None, description='区县级别的返回，例如朝阳区', title='区域名称'
    )
    importance: Optional[List[str]] = Field(None, title='')
    shopid: Optional[List[str]] = None
    shopinfo: Optional[str] = None
    poiweight: Optional[List[str]] = None
    gridcode: Optional[str] = None
    distance: Optional[List[str]] = None
    navi_poiid: Optional[str] = Field(None, title='')
    entr_location: Optional[str] = Field(
        None,
        description=' extensions=all时返回，也可用作于POI的到达点；',
        title='POI的入口经纬度',
    )
    business_area: Optional[str] = Field(
        None, description=' extensions=all时返回', title='所属商圈'
    )
    exit_location: Optional[List[str]] = Field(
        None, description='目前不会返回内容；', title='POI的出口经纬度'
    )
    match: Optional[str] = None
    recommend: Optional[str] = None
    timestamp: Optional[str] = None
    alias: Optional[str] = Field(
        None, description=' extensions=all时返回', title='别名'
    )
    indoor_map: Optional[str] = Field(
        None,
        description='1，表示有室内相关数据  0，代表没有室内相关数据   extensions=all时返回',
        title='是否有室内地图标志',
    )
    indoor_data: Optional[IndoorData3] = Field(
        None,
        description=' 当indoor_map=0时，字段为空   extensions=all时返回 ',
        title='室内地图相关数据',
    )
    groupbuy_num: Optional[str] = Field(
        None, description='此字段逐渐废弃', title='团购数据'
    )
    discount_num: Optional[str] = Field(
        None, description='此字段逐渐废弃 ', title='优惠信息数目'
    )
    biz_ext: Optional[BizExt3] = Field(
        None, description=' extensions=all时返回', title='深度信息'
    )
    event: Optional[List[str]] = None
    children: Optional[List[str]] = Field(None, title='')
    photos: Optional[List[Photo]] = Field(
        None, description='extensions=all时返回', title='照片相关信息'
    )


class V3PlaceDetailGetResponse(BaseModel):
    status: str = Field(
        ..., description='0：请求失败；1：请求成功', title='结果状态值，值为0或1'
    )
    info: str = Field(
        ...,
        description='status为0时，info返回错误原因，否则返回“OK”。详情参阅info状态表',
        title='返回状态说明',
    )
    infocode: str
    count: str = Field(..., title='搜索方案数目')
    pois: List[Pois4] = Field(..., title='搜索POI信息列表')


class Aois1(BaseModel):
    name: Optional[str] = Field(None, description='aoi名称，同poi')
    id: Optional[str] = Field(None, description='aoi唯一标识')
    location: Optional[str] = Field(None, description='aoi中心点经纬度')
    polyline: Optional[str] = Field(None, description='边界经纬度坐标串，以“_”分隔。')
    type: Optional[str] = Field(None, description='aoi所属分类')
    typecode: Optional[str] = Field(None, description='aoi分类编码')
    pname: Optional[str] = Field(None, description='aoi所属省份')
    cityname: Optional[str] = Field(None, description='aoi所属城市')
    adname: Optional[str] = Field(None, description='aoi所属区域')
    address: Optional[str] = Field(None, description='aoi详细地址')
    pcode: Optional[str] = Field(None, description='aoi所属省份编码')
    citycode: Optional[str] = Field(None, description='aoi所属城市编码')
    adcode: Optional[str] = None


class V5AoiPolylineGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='本次API访问状态，如果成功返回0，如果失败返回其他数字。'
    )
    info: Optional[str] = Field(
        None,
        description='访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见[错误码说明](https://lbs.amap.com/api/webservice/guide/tools/info)。',
    )
    aois: Optional[Aois1] = Field(None, description='aoi返回的详细数据字段')


class Photos2(BaseModel):
    title: Optional[str] = Field(None, description='poi的图片介绍')
    url: Optional[str] = Field(None, description='\t poi图片的下载链接')


class Navi5(BaseModel):
    navi_poiid: Optional[str] = Field(
        None,
        description='poi对应的导航引导点坐标。大型面状POI的导航引导点，一般为各类出入口，方便结合导航、路线规划等服务使用',
    )
    entr_location: Optional[str] = Field(None, description='poi的入口经纬度坐标')
    exit_location: Optional[str] = Field(None, description='poi的出口经纬度坐标')
    gridcode: Optional[str] = Field(None, description='poi的地理格id')
    photos: Optional[Photos2] = Field(None, description='设置后返回poi图片相关信息')


class Indoor(BaseModel):
    field__indoor_map: Optional[str] = Field(
        None, alias='\t indoor_map', description='是否有室内地图标志，1为有，0为没有'
    )
    cpid: Optional[str] = Field(
        None,
        description='如果当前POI为建筑物类POI，则cpid为自身POI ID；如果当前POI为商铺类POI，则cpid为其所在建筑物的POI ID。  indoor_map为0时不返回',
    )
    floor: Optional[str] = Field(
        None, description='楼层索引，一般会用数字表示，例如8；indoor_map为0时不返回'
    )
    truefloor: Optional[str] = Field(
        None, description='所在楼层，一般会带有字母，例如F8；indoor_map为0时不返回'
    )
    navi: Optional[Navi5] = Field(None, description='设置后返回导航位置相关信息')


class Business(BaseModel):
    business_area: Optional[str] = Field(None, description='poi所属商圈')
    opentime_today: Optional[str] = Field(
        None,
        description='poi今日营业时间，如 08:30-17:30 08:30-09:00 12:00-13:30 09:00-13:00',
    )
    opentime_week: Optional[str] = Field(
        None,
        description='poi营业时间描述，如 周一至周五:08:30-17:30(延时服务时间:08:30-09:00；12:00-13:30)；周六延时服务时间:09:00-13:00(法定节假日除外)',
    )
    tel: Optional[str] = Field(None, description='poi的联系电话')
    tag: Optional[str] = Field(None, description='poi特色内容，目前仅在美食poi下返回')
    rating: Optional[str] = Field(
        None, description='\t poi评分，目前仅在餐饮、酒店、景点、影院类POI下返回'
    )
    cost: Optional[str] = Field(
        None, description='poi人均消费，目前仅在餐饮、酒店、景点、影院类POI下返回'
    )
    parking_type: Optional[str] = Field(
        None, description='停车场类型（地下、地面、路边），目前仅在停车场类POI下返回'
    )
    alias: Optional[str] = Field(None, description='poi的别名，无别名时不返回')
    indoor: Optional[Indoor] = Field(None, description='设置后返回室内相关信息')


class Children2(BaseModel):
    id: Optional[str] = Field(None, description='子poi唯一标识')
    name: Optional[str] = Field(None, description='\t 子poi名称')
    location: Optional[str] = Field(None, description='子poi经纬度')
    address: Optional[str] = Field(None, description='子poi详细地址')
    subtype: Optional[str] = Field(None, description='子poi所属类型')
    typecode: Optional[str] = Field(None, description='子poi分类编码')
    business: Optional[Business] = Field(None, description='设置后返回poi商业信息')


class Pois5(BaseModel):
    poi: Optional[str] = Field(None, description='\t 单个poi内包含的完整返回数据')
    name: Optional[str] = Field(None, description='\t poi名称')
    id: Optional[str] = Field(None, description='poi唯一标识')
    location: Optional[str] = Field(None, description='\t poi经纬度')
    type: Optional[str] = Field(None, description='poi所属类型')
    typecode: Optional[str] = Field(None, description='poi分类编码')
    pname: Optional[str] = Field(None, description='\t poi所属省份')
    cityname: Optional[str] = Field(None, description='\t poi所属城市')
    adname: Optional[str] = Field(None, description='poi所属区县')
    address: Optional[str] = Field(None, description='\t poi详细地址')
    pcode: Optional[str] = Field(None, description='poi所属省份编码')
    adcode: Optional[str] = Field(None, description='poi所属区域编码')
    citycode: Optional[str] = Field(None, description='poi所属城市编码')
    children: Optional[Children2] = Field(None, description='\t 设置后返回子POI信息')


class V5PlaceTextGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='\t 本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[str] = Field(
        None,
        description='访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见[错误码说明](https://lbs.amap.com/api/webservice/guide/tools/info)。',
    )
    infocode: Optional[str] = Field(
        None, description='返回状态说明,10000代表正确,详情参阅info状态表'
    )
    count: Optional[str] = Field(None, description='单次请求返回的实际poi点的个数')
    pois: Optional[Pois5] = Field(None, description='返回的poi完整集合')


class Photos3(BaseModel):
    title: Optional[str] = Field(None, description='poi的图片介绍')
    url: Optional[str] = Field(None, description='poi图片的下载链接')


class Navi6(BaseModel):
    navi_poiid: Optional[str] = Field(
        None,
        description='poi对应的导航引导点坐标。大型面状POI的导航引导点，一般为各类出入口，方便结合导航、路线规划等服务使用',
    )
    entr_location: Optional[str] = Field(None, description='poi的入口经纬度坐标')
    exit_location: Optional[str] = Field(None, description='poi的出口经纬度坐标')
    gridcode: Optional[str] = Field(None, description='poi的地理格id')
    photos: Optional[Photos3] = Field(None, description='设置后返回poi图片相关信息')


class Business1(BaseModel):
    field__business_area: Optional[str] = Field(
        None, alias='\t business_area', description='poi所属商圈'
    )
    tel: Optional[str] = Field(None, description='poi的联系电话')
    tag: Optional[str] = Field(None, description='poi特色内容，目前仅在美食poi下返回')
    rating: Optional[str] = Field(
        None, description='poi评分，目前仅在餐饮、酒店、景点、影院类POI下返回'
    )
    cost: Optional[str] = Field(
        None, description='poi人均消费，目前仅在餐饮、酒店、景点、影院类POI下返回'
    )
    parking_type: Optional[str] = Field(
        None, description='停车场类型（地下、地面、路边），目前仅在停车场类POI下返回'
    )
    alias: Optional[str] = Field(None, description='poi的别名，无别名时不返回')
    navi: Optional[Navi6] = Field(None, description='设置后返回导航位置相关信息')


class Children3(BaseModel):
    id: Optional[str] = Field(None, description='子poi唯一标识')
    name: Optional[str] = Field(None, description='\t 子poi名称')
    location: Optional[str] = Field(None, description='子poi经纬度')
    address: Optional[str] = Field(None, description='子poi详细地址')
    subtype: Optional[str] = Field(None, description='子poi所属类型')
    typecode: Optional[str] = Field(None, description='\t 子poi分类编码')
    business: Optional[Business1] = Field(None, description='设置后返回poi商业信息')


class Pois6(BaseModel):
    poi: Optional[str] = Field(None, description='单个poi内包含的完整返回数据')
    field__name: Optional[str] = Field(None, alias='\t name', description='poi名称')
    id: Optional[str] = Field(None, description='poi唯一标识')
    location: Optional[str] = Field(None, description='poi经纬度')
    type: Optional[str] = Field(None, description='poi所属类型')
    typecode: Optional[str] = Field(None, description='poi分类编码')
    pname: Optional[str] = Field(None, description='poi所属省份')
    cityname: Optional[str] = Field(None, description='poi所属城市')
    adname: Optional[str] = Field(None, description='poi所属区县')
    address: Optional[str] = Field(None, description='poi详细地址')
    pcode: Optional[str] = Field(None, description='poi所属省份编码')
    adcode: Optional[str] = Field(None, description='poi所属区域编码')
    citycode: Optional[str] = Field(None, description='poi所属城市编码')
    children: Optional[Children3] = Field(None, description='设置后返回子POI信息')


class V5PlaceAroundGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[str] = Field(
        None,
        description='访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见[错误码说明](https://lbs.amap.com/api/webservice/guide/tools/info)。',
    )
    infocode: Optional[str] = Field(
        None, description='返回状态说明,10000代表正确,详情参阅info状态表'
    )
    count: Optional[str] = Field(None, description='单次请求返回的实际poi点的个数')
    pois: Optional[Pois6] = Field(None, description='返回的poi完整集合')


class Photos4(BaseModel):
    title: Optional[str] = Field(None, description='\t poi的图片介绍')
    url: Optional[str] = Field(None, description='poi图片的下载链接')


class Navi7(BaseModel):
    navi_poiid: Optional[str] = Field(
        None,
        description='poi对应的导航引导点坐标。大型面状POI的导航引导点，一般为各类出入口，方便结合导航、路线规划等服务使用',
    )
    entr_location: Optional[str] = Field(None, description='poi的入口经纬度坐标')
    exit_location: Optional[str] = Field(None, description='poi的出口经纬度坐标')
    gridcode: Optional[str] = Field(None, description='poi的地理格id')
    photos: Optional[Photos4] = Field(None, description='设置后返回poi图片相关信息')


class Indoor1(BaseModel):
    indoor_map: Optional[str] = Field(
        None, description='是否有室内地图标志，1为有，0为没有'
    )
    cpid: Optional[str] = Field(
        None,
        description='如果当前POI为建筑物类POI，则cpid为自身POI ID；如果当前POI为商铺类POI，则cpid为其所在建筑物的POI ID。  indoor_map为0时不返回',
    )
    floor: Optional[str] = Field(
        None, description='\t 楼层索引，一般会用数字表示，例如8；indoor_map为0时不返回'
    )
    truefloor: Optional[str] = Field(
        None, description='所在楼层，一般会带有字母，例如F8；indoor_map为0时不返回'
    )
    navi: Optional[Navi7] = Field(None, description='设置后返回导航位置相关信息')


class Business2(BaseModel):
    business_area: Optional[str] = Field(None, description='poi所属商圈')
    tel: Optional[str] = Field(None, description='\t poi的联系电话')
    tag: Optional[str] = Field(None, description='poi特色内容，目前仅在美食poi下返回')
    rating: Optional[str] = Field(
        None, description='\t poi评分，目前仅在餐饮、酒店、景点、影院类POI下返回'
    )
    cost: Optional[str] = Field(
        None, description='poi人均消费，目前仅在餐饮、酒店、景点、影院类POI下返回'
    )
    parking_type: Optional[str] = Field(
        None, description='停车场类型（地下、地面、路边），目前仅在停车场类POI下返回'
    )
    alias: Optional[str] = Field(None, description='poi的别名，无别名时不返回')
    indoor: Optional[Indoor1] = Field(None, description='设置后返回室内相关信息')


class Children4(BaseModel):
    id: Optional[str] = Field(None, description='子poi唯一标识')
    name: Optional[str] = Field(None, description='子poi名称')
    location: Optional[str] = Field(None, description='\t 子poi经纬度')
    address: Optional[str] = Field(None, description='子poi详细地址')
    subtype: Optional[str] = Field(None, description='子poi所属类型')
    typecode: Optional[str] = Field(None, description='子poi分类编码')
    business: Optional[Business2] = Field(None, description='\t 设置后返回子POI信息')


class Pois7(BaseModel):
    poi: Optional[str] = Field(None, description='单个poi内包含的完整返回数据')
    field__name: Optional[str] = Field(None, alias='\t name', description='\t poi名称')
    id: Optional[str] = Field(None, description='poi唯一标识')
    location: Optional[str] = Field(None, description='poi经纬度')
    type: Optional[str] = Field(None, description='poi所属类型')
    typecode: Optional[str] = Field(None, description='poi分类编码')
    pname: Optional[str] = Field(None, description='poi所属省份')
    cityname: Optional[str] = Field(None, description='poi所属城市')
    adname: Optional[str] = Field(None, description='poi所属区县')
    address: Optional[str] = Field(None, description='poi详细地址')
    pcode: Optional[str] = Field(None, description='poi所属省份编码')
    adcode: Optional[str] = Field(None, description='poi所属区域编码')
    citycode: Optional[str] = Field(None, description='\t poi所属城市编码')
    children: Optional[Children4] = Field(None, description='设置后返回子POI信息')


class V5PlacePolygonGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[str] = Field(
        None,
        description='访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见[错误码说明](https://lbs.amap.com/api/webservice/guide/tools/info)。',
    )
    infocode: Optional[str] = Field(
        None, description='返回状态说明,10000代表正确,详情参阅info状态表'
    )
    count: Optional[str] = Field(None, description='单次请求返回的实际poi点的个数')
    pois: Optional[Pois7] = Field(None, description='返回的poi完整集合')


class Photos5(BaseModel):
    title: Optional[str] = Field(None, description='poi的图片介绍')
    url: Optional[str] = Field(None, description='poi图片的下载链接')


class Navi8(BaseModel):
    navi_poiid: Optional[str] = Field(
        None,
        description='poi对应的导航引导点坐标。大型面状POI的导航引导点，一般为各类出入口，方便结合导航、路线规划等服务使用',
    )
    entr_location: Optional[str] = Field(None, description='poi的入口经纬度坐标')
    exit_location: Optional[str] = Field(None, description='poi的出口经纬度坐标')
    gridcode: Optional[str] = Field(None, description='poi的地理格id')
    photos: Optional[Photos5] = Field(None, description='设置后返回poi图片相关信息')


class Indoor2(BaseModel):
    indoor_map: Optional[str] = Field(
        None, description='是否有室内地图标志，1为有，0为没有'
    )
    cpid: Optional[str] = Field(
        None,
        description='如果当前POI为建筑物类POI，则cpid为自身POI ID；如果当前POI为商铺类POI，则cpid为其所在建筑物的POI ID。  indoor_map为0时不返回',
    )
    floor: Optional[str] = Field(
        None, description='楼层索引，一般会用数字表示，例如8；indoor_map为0时不返回'
    )
    truefloor: Optional[str] = Field(
        None, description='所在楼层，一般会带有字母，例如F8；indoor_map为0时不返回'
    )
    navi: Optional[Navi8] = Field(None, description='设置后返回导航位置相关信息')


class Business3(BaseModel):
    business_area: Optional[str] = Field(None, description='poi所属商圈')
    tel: Optional[str] = Field(None, description='poi的联系电话')
    tag: Optional[str] = Field(None, description='poi特色内容，目前仅在美食poi下返回')
    rating: Optional[str] = Field(
        None, description='poi评分，目前仅在餐饮、酒店、景点、影院类POI下返回'
    )
    cost: Optional[str] = Field(
        None, description='poi人均消费，目前仅在餐饮、酒店、景点、影院类POI下返回'
    )
    parking_type: Optional[str] = Field(
        None, description='停车场类型（地下、地面、路边），目前仅在停车场类POI下返回'
    )
    alias: Optional[str] = Field(None, description='poi的别名，无别名时不返回')
    indoor: Optional[Indoor2] = Field(None, description='设置后返回室内相关信息')


class Children5(BaseModel):
    id: Optional[str] = Field(None, description='子poi唯一标识')
    name: Optional[str] = Field(None, description='子poi名称')
    location: Optional[str] = Field(None, description='子poi经纬度')
    address: Optional[str] = Field(None, description='子poi详细地址')
    subtype: Optional[str] = Field(None, description='子poi所属类型')
    typecode: Optional[str] = Field(None, description='子poi分类编码')
    business: Optional[Business3] = Field(None, description='设置后返回子POI信息')


class Poi1(BaseModel):
    name: Optional[str] = Field(None, description='poi名称')
    id: Optional[str] = Field(None, description='poi唯一标识')
    location: Optional[str] = Field(None, description='poi经纬度')
    type: Optional[str] = Field(None, description='poi所属类型')
    typecode: Optional[str] = Field(None, description='poi分类编码')
    pname: Optional[str] = Field(None, description='poi所属省份')
    cityname: Optional[str] = Field(None, description='poi所属城市')
    adname: Optional[str] = Field(None, description='poi所属区县')
    address: Optional[str] = Field(None, description='poi详细地址')
    pcode: Optional[str] = Field(None, description='poi所属省份编码')
    adcode: Optional[str] = Field(None, description='poi所属区域编码')
    citycode: Optional[str] = Field(None, description='poi所属城市编码')
    children: Optional[Children5] = Field(None, description='设置后返回子POI信息')


class Pois8(BaseModel):
    poi: Optional[Poi1] = Field(None, description='单个POI返回的数据字段')


class V5PlaceDetailGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[str] = Field(
        None,
        description='访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见[错误码说明](https://lbs.amap.com/api/webservice/guide/tools/info)。',
    )
    infocode: Optional[str] = Field(
        None, description='返回状态说明,10000代表正确,详情参阅info状态表'
    )
    pois: Optional[Pois8] = Field(None, description='完整的POI列表')


class Data2(BaseModel):
    brief: Optional[str] = Field(None, description='事件标题')
    endTime: Optional[str] = Field(None, description='事件预计结束时间')
    eventDesc: Optional[str] = Field(None, description='事件描述')
    field_eventID: Optional[str] = Field(None, alias=' eventID', description='事件id')
    eventType: Optional[str] = Field(None, description='事件类型码')
    expressway: Optional[int] = Field(None, description='是否高速  1-是  0-否')
    lines: Optional[str] = Field(None, description='线路坐标')
    nickName: Optional[str] = Field(None, description='发布方名称')
    offcial: Optional[int] = Field(
        None, description='是否权威发布  0-官方  1-权威  2-UGC'
    )
    picture: Optional[str] = Field(None, description='事件图片链接')
    field_roadName: Optional[str] = Field(
        None, alias=' roadName', description='道路名称'
    )
    field_source: Optional[str] = Field(None, alias=' source', description='数据源编号')
    startTime: Optional[str] = Field(None, description='事件开始时间')
    updateTime: Optional[str] = Field(None, description='事件最后更新时间')
    x: Optional[str] = Field(None, description='经度坐标')
    y: Optional[str] = None


class EventQueryByAdcodeGetResponse(BaseModel):
    code_msg_: Optional[str] = Field(
        None,
        alias='code+msg ',
        description=' 调用成功，常见代码：  0：Successful.   成功',
    )
    data: Optional[Data2] = None


class V3IpGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='返回结果状态值  值为0或1,0表示失败；1表示成功'
    )
    info: Optional[str] = Field(
        None,
        description='返回状态说明  返回状态说明，status为0时，info返回错误原因，否则返回“OK”。',
    )
    infocode: Optional[str] = Field(
        None, description='\t 状态码  返回状态说明,10000代表正确,详情参阅info状态表'
    )
    province: Optional[str] = Field(
        None,
        description='省份名称  若为直辖市则显示直辖市名称；  如果在局域网 IP网段内，则返回“局域网”；  非法IP以及国外IP则返回空',
    )
    city: Optional[str] = Field(
        None,
        description='\t 城市名称  若为直辖市则显示直辖市名称；  如果为局域网网段内IP或者非法IP或国外IP，则返回空',
    )
    adcode: Optional[str] = Field(None, description='城市的adcode编码')
    rectangle: Optional[str] = Field(
        None, description='\t 所在城市矩形区域范围  所在城市范围的左下右上对标对'
    )


class V3StaticmapGetResponse(BaseModel):
    pass


class V3AssistantCoordinateConvertGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='返回状态  值为0或1  1：成功；0：失败'
    )
    info: Optional[str] = Field(
        None,
        description='返回的状态信息，status为0时，info返回错误原；否则返回“OK”。详情参阅[info状态表](https://lbs.amap.com/api/webservice/guide/tools/info/)',
    )
    locations: Optional[str] = Field(
        None, description='\t 转换之后的坐标。若有多个坐标，则用 “;”进行区分和间隔'
    )


class Casts(BaseModel):
    date: Optional[str] = Field(None, description='日期')
    week: Optional[str] = Field(None, description='星期几')
    dayweather: Optional[str] = Field(None, description='白天天气现象')
    nightweather: Optional[str] = Field(None, description='晚上天气现象')
    daytemp: Optional[str] = Field(None, description='白天温度')
    nighttemp: Optional[str] = Field(None, description='晚上温度')
    field_daywind: Optional[str] = Field(None, alias=' daywind', description='白天风向')
    nightwind: Optional[str] = Field(None, description='晚上风向')
    daypower: Optional[str] = Field(None, description='白天风力')
    nightpower: Optional[str] = Field(None, description='晚上风力')


class Forecast(BaseModel):
    city: Optional[str] = Field(None, description='城市名称')
    adcode: Optional[str] = Field(None, description='城市编码')
    province: Optional[str] = Field(None, description='省份名称')
    field_reporttime: Optional[str] = Field(
        None, alias=' reporttime', description='预报发布时间'
    )
    casts: Optional[Casts] = Field(
        None,
        description='预报数据list结构，元素cast,按顺序为当天、第二天、第三天的预报数据',
    )


class Life(BaseModel):
    province: Optional[str] = Field(None, description='省份名')
    city: Optional[str] = Field(None, description='城市名')
    adcode: Optional[str] = Field(None, description='\t 区域编码')
    weather: Optional[str] = Field(None, description='天气现象（汉字描述）')
    temperature: Optional[str] = Field(None, description='\t 实时气温，单位：摄氏度')
    winddirection: Optional[str] = Field(None, description='风向描述')
    windpower: Optional[str] = Field(None, description='风力级别，单位：级')
    humidity: Optional[str] = Field(None, description='空气湿度')
    reporttime: Optional[str] = Field(None, description='数据发布的时间')
    forecast: Optional[Forecast] = Field(None, description='预报天气信息数据')


class V3WeatherWeatherInfoGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='返回状态  值为0或1  1：成功；0：失败'
    )
    count: Optional[str] = Field(None, description='返回结果总数目')
    info: Optional[str] = Field(None, description='\t 返回的状态信息')
    infocode: Optional[str] = Field(None, description='\t 返回状态说明,10000代表正确')
    lives: Optional[List[Life]] = Field(None, description='\t 实况天气数据信息')


class Tip(BaseModel):
    id: List[str] = Field(
        ...,
        description='返回数据ID  若数据为POI类型，则返回POI ID;若数据为bus类型，则返回bus id;若数据为busline类型，则返回busline id。',
    )
    name: str = Field(..., description='tip名称')
    district: List[str] = Field(
        ..., description='所属区域  省+市+区（直辖市为“市+区”）'
    )
    adcode: List[str] = Field(..., description='区域编码  六位区县编码')
    location: List[str] = Field(
        ..., description='tip中心点坐标  当搜索数据为busline类型时，此字段不返回'
    )
    address: List[str] = Field(..., description='详细地址')
    typecode: List[str]
    city: List[str]


class V3AssistantInputtipsGetResponse(BaseModel):
    tips: List[Tip] = Field(..., description='建议提示列表')
    status: str = Field(..., description='返回状态  值为0或1 1：成功；0：失败')
    info: str = Field(
        ...,
        description='返回的状态信息,status为0时，info返回错误原；否则返回“OK”。详情参阅[info状态表](https://lbs.amap.com/api/webservice/guide/tools/info/)',
    )
    infocode: str
    count: str = Field(..., description='返回结果总数目')


class Evaluation(BaseModel):
    expedite: Optional[str] = Field(None, description='畅通所占百分比')
    congested: Optional[str] = Field(None, description='缓行所占百分比')
    blocked: Optional[str] = Field(None, description='拥堵所占百分比')
    unknown: Optional[str] = Field(None, description='未知路段所占百分比')
    status: Optional[str] = Field(
        None, description='路况  0：未知  1：畅通  2：缓行  3：拥堵  4：严重拥堵'
    )
    description: Optional[str] = Field(None, description='\t 道路描述')


class Roads1(BaseModel):
    name: Optional[str] = Field(None, description='道路名称')
    status: Optional[str] = Field(
        None, description='路况  0：未知  1：畅通  2：缓行  3：拥堵  4：严重拥堵'
    )
    direction: Optional[str] = Field(None, description='方向描述')
    angle: Optional[str] = Field(
        None,
        description='车行角度，判断道路正反向使用。  以正东方向为0度，逆时针方向为正，  取值范围：[0,360]',
    )
    speed: Optional[str] = Field(None, description='速度  单位：千米/小时')
    lcodes: Optional[str] = Field(
        None,
        description='即locationcode的集合，是道路中某一段的id，一条路包括多个locationcode。  angle在[0-180]之间取正值，[181-359]之间取负值。',
    )
    polyline: Optional[str] = Field(
        None,
        description='道路坐标集，坐标集合  经度和纬度使用","分隔  坐标之间使用";"分隔。  例如：x1,y1;x2,y2',
    )


class Trafficinfo(BaseModel):
    description: Optional[str] = Field(None, description='路况综述')
    evaluation: Optional[Evaluation] = Field(None, description='路况评价')
    roads: Optional[Roads1] = Field(
        None, description='此为road列表  其中包含道路信息  当extensions=all时返回'
    )


class V3TrafficStatusRectangleGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='结果状态值，值为0或1  0：请求失败；1：请求成功'
    )
    info: Optional[str] = Field(None, description='请求状态  OK代表成功')
    infocode: Optional[str] = Field(
        None, description='请求状态编码  10000代表成功，其余请参见错误编码'
    )
    trafficinfo: Optional[Trafficinfo] = Field(None, description='交通态势信息')


class Evaluation1(BaseModel):
    expedite: Optional[str] = Field(None, description='畅通所占百分比')
    congested: Optional[str] = Field(None, description='缓行所占百分比')
    blocked: Optional[str] = Field(None, description='拥堵所占百分比')
    unknown: Optional[str] = Field(None, description='未知路段所占百分比')
    status: Optional[str] = Field(
        None, description='\t 路况  0：未知  1：畅通  2：缓行  3：拥堵  4：严重拥堵'
    )
    description: Optional[str] = Field(None, description='道路描述')


class Trafficinfo1(BaseModel):
    description: Optional[str] = Field(None, description='路况综述')
    evaluation: Optional[Evaluation1] = Field(None, description='路况评价')
    roads: Optional[Roads1] = Field(
        None, description='此为road列表  其中包含道路信息  当extensions=all时返回'
    )


class V3TrafficStatusCircleGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='结果状态值，值为0或1  0：请求失败；1：请求成功'
    )
    info: Optional[str] = Field(None, description='请求状态  OK代表成功')
    infocode: Optional[str] = Field(
        None, description='请求状态编码  10000代表成功，其余请参见错误编码'
    )
    trafficinfo: Optional[Trafficinfo1] = Field(None, description='交通态势信息')


class Evaluation2(BaseModel):
    expedite: Optional[str] = Field(None, description='畅通所占百分比')
    congested: Optional[str] = Field(None, description='缓行所占百分比')
    blocked: Optional[str] = Field(None, description='\t 拥堵所占百分比')
    unknown: Optional[str] = Field(None, description='未知路段所占百分比')
    status: Optional[str] = Field(
        None, description='路况  0：未知  1：畅通  2：缓行  3：拥堵  4：严重拥堵'
    )
    description: Optional[str] = Field(None, description='道路描述')


class Trafficinfo2(BaseModel):
    description: Optional[str] = Field(None, description='路况综述')
    evaluation: Optional[Evaluation2] = Field(None, description='路况评价')
    roads: Optional[Roads1] = Field(
        None, description='此为road列表  其中包含道路信息  当extensions=all时返回'
    )


class V3TrafficStatusRoadGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='结果状态值，值为0或1  0：请求失败；1：请求成功'
    )
    info: Optional[str] = Field(None, description=' 请求状态  OK代表成功')
    infocode: Optional[str] = Field(
        None, description='请求状态编码  10000代表成功，其余请参见错误编码'
    )
    trafficinfo: Optional[Trafficinfo2] = Field(None, description='交通态势信息')


class V4GrasproadDrivingGetRequestItem(BaseModel):
    x: float
    y: float
    sp: int
    ag: int
    tm: int


class V4GrasproadDrivingGetRequest(BaseModel):
    __root__: List[V4GrasproadDrivingGetRequestItem]


class Points(BaseModel):
    x: Optional[str] = Field(None, description='经度')
    y: Optional[str] = Field(None, description='维度')


class Data3(BaseModel):
    distance: Optional[str] = Field(None, description='总距离')
    points: Optional[Points] = Field(None, description='\t 返回坐标合集')


class V4GrasproadDrivingGetResponse(BaseModel):
    data: Optional[Data3] = Field(None, description='数据体')
    errcode: Optional[str] = Field(
        None,
        description='30001错误表示抓路失败。当传入点数较少或较稀疏时，可能会导致抓路失败。',
    )
    errdetail_: Optional[str] = Field(None, alias='errdetail ')
    errmsg_: Optional[str] = Field(None, alias='errmsg ')


class Geometry(BaseModel):
    coordinates: Optional[Union[str, List[str]]] = Field(
        None,
        description="点对象（string）：'39.23489, 127.32487'  线/面对象（array）：  ['39.23489, 127.32487', '39.23489,   127.32487', '39.23489, 127.32487',  '39.23489, 127.32487', '39.23489,  127.32487', '39.23489, 127.32487']",
    )
    type: Optional[str] = Field(
        None, description='point/polyline/polygon/multipoint/multipolyline/multipolygon'
    )


class Property1(BaseModel):
    name: Optional[str] = Field(None, description='属性名称')
    value: Optional[Union[str, float, bool]] = Field(None, description='属性值')


class Property2(BaseModel):
    name: Optional[str] = Field(None, description='属性名称')
    value: Optional[Union[str, float, bool]] = Field(None, description='属性值')


class Properties14(BaseModel):
    property1: Optional[Property1] = None
    property2: Optional[Property2] = None


class Objects(BaseModel):
    geometry: Optional[Geometry] = None
    properties: Optional[Properties14] = None


class RestLbsGeohubPlaceTextGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[str] = Field(
        None,
        description='访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见[错误码说明](https://lbs.amap.com/api/webservice/guide/tools/info)。',
    )
    infocode: Optional[str] = Field(
        None, description='\t 返回状态说明,10000代表正确,详情参阅info状态表'
    )
    count: Optional[str] = Field(None, description='单次请求返回的实际poi点的个数')
    objects: Optional[Objects] = Field(None, description='符合关键字筛选条件的数据对象')


class Infocode2(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None


class Items46(BaseModel):
    type: Optional[str] = None


class OneOfItem(BaseModel):
    type: Optional[str] = None
    items: Optional[Items46] = None


class Coordinates(BaseModel):
    oneOf: Optional[List[OneOfItem]] = None
    description: Optional[str] = None


class Properties17(BaseModel):
    coordinates: Optional[Coordinates] = None
    type: Optional[Type] = None


class Geometry1(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties17] = None
    required: Optional[List[str]] = None


class OneOfItem1(BaseModel):
    type: Optional[str] = None


class Value(BaseModel):
    oneOf: Optional[List[OneOfItem1]] = None
    description: Optional[str] = None


class Properties20(BaseModel):
    name: Optional[Name] = Field(None, description='属性名称')
    value: Optional[Value] = Field(None, description='属性值')


class Property11(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties20] = None
    required: Optional[List[str]] = None


class Value1(BaseModel):
    oneOf: Optional[List[OneOfItem1]] = None
    description: Optional[str] = None


class Properties21(BaseModel):
    name: Optional[Name] = Field(None, description='属性名称')
    value: Optional[Value1] = Field(None, description='属性值')


class Property21(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties21] = None
    required: Optional[List[str]] = None


class Properties19(BaseModel):
    property1: Optional[Property11] = None
    property2: Optional[Property21] = None


class Properties18(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties19] = None
    required: Optional[List[str]] = None


class Properties16(BaseModel):
    geometry: Optional[Geometry1] = Field(
        None,
        description="点对象（string）：'39.23489, 127.32487'  线/面对象（array）：  ['39.23489, 127.32487', '39.23489,   127.32487', '39.23489, 127.32487',  '39.23489, 127.32487', '39.23489,  127.32487', '39.23489, 127.32487']",
    )
    properties: Optional[Properties18] = None


class Objects1(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties16] = None
    description: Optional[str] = None
    required: Optional[List[str]] = None


class Properties15(BaseModel):
    status: Optional[Status] = Field(
        None, description='本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[Info] = Field(
        None,
        description='访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见[错误码说明](https://lbs.amap.com/api/webservice/guide/tools/info)。',
    )
    infocode: Optional[Infocode2] = Field(
        None, description='返回状态说明,10000代表正确,详情参阅info状态表'
    )
    count: Optional[Count] = Field(None, description='单次请求返回的实际poi点的个数')
    objects: Optional[Objects1] = Field(
        None, description='符合关键字筛选条件的数据对象'
    )


class RestLbsGeohubPlacePolygonGetResponse(BaseModel):
    type: Optional[str] = Field(
        None,
        description='\t point/polyline/polygon/multipoint/multipolyline/multipolygon',
    )
    properties: Optional[Properties15] = None
    required: Optional[List[str]] = None


class OneOfItem3(BaseModel):
    type: Optional[str] = None
    items: Optional[Items46] = None


class Coordinates1(BaseModel):
    oneOf: Optional[List[OneOfItem3]] = None
    description: Optional[str] = None


class Properties24(BaseModel):
    coordinates: Optional[Coordinates1] = Field(
        None,
        description="点对象（string）：'39.23489, 127.32487'  线/面对象（array）：  ['39.23489, 127.32487', '39.23489,   127.32487', '39.23489, 127.32487',  '39.23489, 127.32487', '39.23489,  127.32487', '39.23489, 127.32487']",
    )
    type: Optional[Type] = Field(
        None, description='point/polyline/polygon/multipoint/multipolyline/multipolygon'
    )


class Geometry2(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties24] = None
    required: Optional[List[str]] = None


class OneOfItem4(BaseModel):
    type: Optional[str] = None


class Value2(BaseModel):
    oneOf: Optional[List[OneOfItem4]] = None
    description: Optional[str] = None


class Properties27(BaseModel):
    name: Optional[Name] = Field(None, description='属性名称')
    value: Optional[Value2] = Field(None, description='\t 属性值')


class Property12(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties27] = None
    required: Optional[List[str]] = None


class Value3(BaseModel):
    oneOf: Optional[List[OneOfItem4]] = None
    description: Optional[str] = None


class Properties28(BaseModel):
    name: Optional[Name] = Field(None, description='属性名称')
    value: Optional[Value3] = Field(None, description='\t 属性值')


class Property22(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties28] = None
    required: Optional[List[str]] = None


class Properties26(BaseModel):
    property1: Optional[Property12] = None
    property2: Optional[Property22] = None


class Properties25(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties26] = None
    required: Optional[List[str]] = None


class Properties23(BaseModel):
    geometry: Optional[Geometry2] = None
    properties: Optional[Properties25] = None


class Objects2(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties23] = None
    description: Optional[str] = None
    required: Optional[List[str]] = None


class Properties22(BaseModel):
    status: Optional[Status] = Field(
        None, description='本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[Info] = Field(
        None,
        description=' 访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见[错误码说明](https://lbs.amap.com/api/webservice/guide/tools/info)。',
    )
    infocode: Optional[Infocode2] = Field(
        None, description='返回状态说明,10000代表正确,详情参阅info状态表'
    )
    count: Optional[Count] = Field(None, description='单次请求返回的实际poi点的个数')
    objects: Optional[Objects2] = Field(
        None, description='符合关键字筛选条件的数据对象'
    )


class RestLbsGeohubPlaceAroundGetResponse(BaseModel):
    type: Optional[str] = None
    properties: Optional[Properties22] = None
    required: Optional[List[str]] = None


class Geometry3(BaseModel):
    coordinates: Optional[List[str]] = Field(
        None,
        description="点对象（string）：'39.23489, 127.32487'  线/面对象（array）：  ['39.23489, 127.32487', '39.23489,   127.32487', '39.23489, 127.32487',  '39.23489, 127.32487', '39.23489,  127.32487', '39.23489, 127.32487']",
    )
    type: Optional[str] = Field(
        None, description='point/polyline/polygon/multipoint/multipolyline/multipolygon'
    )


class Property13(BaseModel):
    name: Optional[str] = Field(None, description='属性名称')
    value: Optional[int] = Field(None, description='属性值')


class Property23(BaseModel):
    name: Optional[str] = Field(None, description='属性名称')
    value: Optional[int] = Field(None, description='属性值')


class Properties29(BaseModel):
    property1: Optional[Property13] = None
    property2: Optional[Property23] = None


class Objects3(BaseModel):
    geometry: Optional[Geometry3] = None
    properties: Optional[Properties29] = None


class RestLbsGeohubPlacePropertiesGetResponse(BaseModel):
    status: Optional[str] = Field(
        None, description='本次API访问状态，如果成功返回1，如果失败返回0。'
    )
    info: Optional[str] = Field(
        None,
        description='访问状态值的说明，如果成功返回"ok"，失败返回错误原因，具体见[错误码说明](https://lbs.amap.com/api/webservice/guide/tools/info)。',
    )
    infocode: Optional[str] = Field(
        None, description='\t 返回状态说明,10000代表正确,详情参阅info状态表'
    )
    count: Optional[str] = Field(None, description='单次请求返回的实际poi点的个数')
    objects: Optional[Objects3] = Field(
        None, description='符合关键字筛选条件的数据对象'
    )
